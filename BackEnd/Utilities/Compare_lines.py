import math
from shapesimilarity import shape_similarity
import numpy as np
import matplotlib.pyplot as plt
from fastdtw import fastdtw
np.set_printoptions(threshold=np.inf)


def DTW(l1, l2, window=5):

    n = len(l1[0])
    m = len(l2[0])

    window = np.max([window, abs(n - m)])

    dtw_matrix = np.full((n + 1, m + 1), np.inf)
    dtw_matrix[0, 0] = 0

    for i in range(1, n + 1):
        for j in range(np.max([1, i - window]), np.min([i + window, m]) + 1):
            dist = np.hypot(abs(l1[0][i-1] - l1[1][i-1]), abs(l2[0][j-1] - l2[1][j-1]))
            last_min = np.min([dtw_matrix[i, j - 1], dtw_matrix[i - 1, j], dtw_matrix[i - 1, j - 1]])
            dtw_matrix[i, j] = dist + last_min
    # print(dtw_matrix)

    return dtw_matrix[n-1][m-1]


def check_DTW(l1, l2):
    l1_points = []
    l2_points = []
    for i in range(len(l1[0])):
        l1_points.append([l1[0][i], l1[1][i]])
    for i in range(len(l2[0])):
        l2_points.append([l2[0][i], l2[1][i]])
    return fastdtw(l1_points, l2_points)[0]


def check_FID(l1, l2):
    lines_list_1 = lines_list(l1)
    lines_list_2 = lines_list(l2)
    center_1 = alignPoints(l1)
    center_2 = alignPoints(l2)
    l2 = [np.array(l2)[0] - (center_2[0] - center_1[0]), np.array(l2[1]) - (center_2[1] - center_1[1])]

    n = min(len(lines_list_1), len(lines_list_2))
    # print(sum(lines_list_1), sum(lines_list_2))
    sep_point = min(sum(lines_list_1), sum(lines_list_2)) / n
    even_list_1 = findEvenLists(lines_list_1, l1, n-1, sep_point)
    even_list_2 = findEvenLists(lines_list_2, l2, n-1, sep_point)

    dis = 0
    for i in range(len(even_list_1[0])):
        dis += math.hypot(even_list_2[0][i] - even_list_1[0][i], even_list_2[1][i] - even_list_1[1][i])
    return dis / n
    # print("even_1", even_list_1)
    # plt.scatter(l1[0], l1[1])
    # plt.scatter(l2[0], l2[1])
    # plt.plot(l1[0], l1[1], '-.')
    # plt.plot(l2[0], l2[1], ':')
    # plt.scatter(even_list_1[0], even_list_1[1])
    # plt.scatter(even_list_2[0], even_list_2[1])
    # plt.plot(even_list_1[0], even_list_1[1], '-')
    # plt.plot(even_list_2[0], even_list_2[1], '--')
    # plt.show()

    # dis = 0
    # for i in range(n):
    #     dis += math.hypot(l2[0][i] - l1[0][i], l2[1][i] - l1[1][i])
    #
    # return dis

    # simil = similarity(even_list_1, even_list_2)


def similarity(l1, l2):

    shape1 = np.row_stack(l1)
    shape2 = np.row_stack(l2)
    length = min(len(shape1), len(shape2))
    sim_lines = 0
    shape1 = shape1[:length]
    shape2 = shape2[:length]

    try:
        sim_lines = shape_similarity(shape1, shape2)
    except:
        pass

    return sim_lines
    # print("similartiy:{}".format(sim_lines))

    # plt.plot(shape1[:, 0], shape1[:, 1], linewidth=2.0)
    # plt.plot(shape2[:, 0], shape2[:, 1], linewidth=2.0)

    # plt.title(f'Shape similarity is: {sim_lines}', fontsize=14, fontweight='bold')
    # plt.show()


def lines_list(points_list):
    lengths_list = []
    x_list = points_list[0]
    y_list = points_list[1]
    for i in range(len(x_list)-1):
        dist = math.hypot(x_list[i+1] - x_list[i], y_list[i+1] - y_list[i])
        # print("dist", dist)
        lengths_list.append(dist)
    return lengths_list


def findEvenLists(llist, points_list, n, sep):
    cum_sum = np.cumsum(llist)
    count = 1
    index = 0
    even_list = [[points_list[0][0]], [points_list[1][0]]]

    while True:
        if count > n:
            break
        if cum_sum[index] < count * sep:
            index += 1
            if index >= len(cum_sum):
                break
            continue

        if abs(llist[index]) >= 10e-15:
            inter_xy = findInterPoint(points_list[0][index-1], points_list[1][index-1],
                                      points_list[0][index], points_list[1][index],
                                      (count*sep - cum_sum[index-1])/llist[index])
            even_list[0].append(inter_xy[0])
            even_list[1].append(inter_xy[1])

            count += 1
    return even_list


def findInterPoint(x1, y1, x2, y2, frac):
    inter_x = frac*(x2-x1)+x1
    inter_y = frac*(y2-y1)+y1
    return inter_x, inter_y


def alignPoints(points_list):
    center = [0, 0]
    for i in range(len(points_list[0])):
        center[0] += points_list[0][i]
        center[1] += points_list[1][i]
    return np.array(center)/len(points_list[0])


def check_input(val, gestures):

    info_fid = {"num": -1, "value": 1000000, "diff": 0}
    info_dtw = {"num": -1, "value": 1000000, "diff": 0}
    info_simi = {"num": -1, "value": 0, "diff": 0}
    for i, gesture in gestures.items():
        fid_result = check_FID(val, gesture)
        if fid_result < info_fid["value"]:
            info_fid["diff"] = abs(fid_result - info_fid["value"])
            info_fid["value"] = fid_result
            info_fid["num"] = i
        # print("fid", i, fid_result)

        dtw_result = check_DTW(val, gesture)
        if dtw_result < info_dtw["value"]:
            info_dtw["diff"] = abs(dtw_result - info_dtw["value"])
            info_dtw["value"] = dtw_result
            info_dtw["num"] = i
        # print("dtw", i, dtw_result)

        simi_result = similarity(val, gesture)
        if math.isnan(simi_result):
            simi_result = 0
        if simi_result > info_simi["value"]:
            info_simi["diff"] = abs(simi_result - info_simi["value"])
            info_simi["value"] = simi_result
            info_simi["num"] = i
        # print("simi", i, simi_result)

    fid_signal = info_fid["num"]
    dtw_signal = info_dtw["num"]
    simi_signal = info_simi["num"]
    print(info_fid, info_dtw, info_simi)

    signal_list_raw = [fid_signal, dtw_signal, simi_signal]
    signal_list = []

    for i in signal_list_raw:
        if i != -1:
            signal_list.append(i)

    if len(signal_list) < 2:
        return -1

    if len(set(signal_list)) == len(signal_list):
        return -1

    signal_set = list(set(signal_list))
    for i in signal_set:
        signal_list.remove(i)

    return signal_list[0]



if __name__ == "__main__":
    a = [[0.7709682155496889, 0.7709682155496889, 0.770390383417959, 0.763802457230024, 0.7539703079404039, 0.7400812800581433, 0.7235227361802342, 0.7023125915581374, 0.6761880464121376, 0.6482423553407936, 0.6214351408915973, 0.5827909243599064, 0.54459849725699, 0.5086095852945814, 0.474115551694082, 0.4429113144866258, 0.4135542650852896, 0.38930975771787407, 0.3662802528994007, 0.34271395051276277, 0.31651139133249573, 0.29636695487712156, 0.27693867014308415, 0.2594855504578367, 0.2420148897057524, 0.2324537619896354, 0.22235700858998877, 0.21213119906975425, 0.20344677126995725, 0.19894318141529363, 0.19325449997189337, 0.1884472803887264, 0.18158667710772472, 0.18026947877808072, 0.18026947877808072, 0.18168083710807295, 0.18812532833696288, 0.1945589191786138, 0.2019032131923406, 0.2103175122831181, 0.22062217289807332, 0.23333894411855097, 0.24373936444938776, 0.2532980367881745, 0.2624911927289283, 0.2738335106847419, 0.28360059247510927, 0.2922334015469398, 0.3044060834726357, 0.3190171783034377, 0.33467973267190926, 0.3479333386632383, 0.36226634341004066, 0.3809515788801686, 0.41217389659342063, 0.4403720823002302, 0.46151693620695317, 0.4802480797926203, 0.5007625341711329, 0.5222496899993114, 0.5440442516287057, 0.5631874893763077, 0.5766183661703469, 0.5915889133612297, 0.6076682122274889, 0.6224209376870249, 0.6319216854424287, 0.6377465845236302, 0.6421164121178229, 0.6452523009954807, 0.6485134885223572, 0.6525727480869541, 0.6577974934243321, 0.6607415652487322, 0.6622938845590955], [0.13670041706816116, 0.12680182377987556, 0.10557162690958136, 0.0840656837245574, 0.06030851295317569, 0.039976984185770274, 0.020529633074736216, 0.011073956374418109, 0.003473633469977562, 0, 0.00020948832949854238, 0.0033765716600571752, 0.011738693982565853, 0.01772555496084994, 0.03113887208670875, 0.041999154829360764, 0.057420245159009675, 0.075520021946609, 0.0956548601087829, 0.11832999073392679, 0.14752572928519986, 0.17945642335824263, 0.2112134180865103, 0.24204640968216293, 0.26859264728329796, 0.2926774435161837, 0.3179286927917078, 0.3463318281002236, 0.3711237730042349, 0.4008480501271978, 0.42938199008258215, 0.4554348084483879, 0.485221586085213, 0.5101857050238396, 0.5427030854680762, 0.6147112667853407, 0.6515918527455155, 0.6898519887384491, 0.7282813225510523, 0.7696773474216436, 0.8065007900548588, 0.8400867060700165, 0.865696440435764, 0.884768993078403, 0.9002054295163662, 0.9113738993166574, 0.923993943551396, 0.933171548769058, 0.9417471401085552, 0.9487969748560805, 0.9512376943277696, 0.9512376943277696, 0.9512376943277696, 0.9512376943277696, 0.9483372240523257, 0.9442916550764796, 0.9407899893819811, 0.9327784651800894, 0.9239289876602036, 0.9114500904192702, 0.8954539023553728, 0.8828703911590939, 0.8690967660113574, 0.8574509857391313, 0.8452367484122544, 0.833270653006485, 0.8227126048915804, 0.817030340911657, 0.8145117934191349, 0.8113756813253561, 0.8099288688348218, 0.8040545645855198, 0.7972279459589307, 0.7946032964035902, 0.7938214447373246]]
    b = [[0.36213711055836684, 0.36383087624433896, 0.36383087624433896, 0.36383087624433896, 0.36383087624433896, 0.35956678384235813, 0.34819884027633347, 0.3364474423856376, 0.32431933904737137, 0.3153843150595844, 0.30307871625356875, 0.2953998101439638, 0.2840932138707849, 0.2773199058349425, 0.27200538445661726, 0.26813821038912355, 0.26608771593179914, 0.26356493505496514, 0.26356493505496514, 0.26356493505496514, 0.26356493505496514, 0.26356493505496514, 0.26356493505496514, 0.26356493505496514, 0.26356493505496514, 0.26356493505496514, 0.26356493505496514, 0.26609171464148135, 0.2736728463940893, 0.2881808737531597, 0.3218340987994102, 0.3561790500041008, 0.3942528064235272, 0.43740435048477777, 0.47934075922404046, 0.5215195876287616, 0.5560844003772015, 0.582536556684772, 0.6038797792826986, 0.6258164306440931, 0.6441222536140616, 0.659159797870456, 0.6707243362264251, 0.678553236129594, 0.6878006825105668, 0.6921765869339142, 0.693200796522722, 0.6925638375019544, 0.6735991554050264, 0.655066772630786, 0.6331147675739874, 0.6064452636793876, 0.5747951897175998, 0.5379586374482807, 0.49691331669701383, 0.4522265380728875, 0.4075097606900484, 0.3669219969340189, 0.3301328723985251, 0.2979230803143877, 0.27338664338843977, 0.2609232220914234, 0.25834921723739473, 0.2662178342823014, 0.2862200887446969, 0.32375509917736417, 0.3723791220854827, 0.43037522626243185, 0.488434499929044, 0.5376856116251703, 0.5776115973648942, 0.6131747040140751, 0.6379116669508788, 0.6552230766244391, 0.6680055510863929, 0.6795457934847994, 0.689028505721504, 0.6939730705293595, 0.6971760876013696, 0.6974213417952104, 0.6974213417952104, 0.6974213417952104, 0.6928893358445231, 0.6876861540661673, 0.6787860723895693, 0.6700157716196187, 0.6564209685654345, 0.642935598553439, 0.6279681076413502, 0.6095680028582844, 0.588898351939397, 0.5651446329073999, 0.5432182060948131, 0.520425392184419, 0.49541101665438964, 0.4675189874173767, 0.4434112560370604, 0.42413221124477996, 0.41306044215032117, 0.4082992780776782, 0.4063696391370353], [0, 0.00320612155547647, 0.014678419633671289, 0.037953457685105794, 0.07416133518029853, 0.12446851116514825, 0.17971991451399844, 0.24472708966704904, 0.30534287172380614, 0.3662283389095087, 0.4260946581642288, 0.47214312397658553, 0.5224238106188148, 0.5695095113527839, 0.606432213038294, 0.6429852787249968, 0.6774020548542319, 0.7112573918974567, 0.7468229618867795, 0.7836078515018926, 0.8229637933373027, 0.859686795749402, 0.9134458536493515, 0.9304418882959944, 0.9419577672480672, 0.9506813657884808, 0.9557705590326051, 0.9519201896690923, 0.9463878651545335, 0.9410199432861487, 0.9312038365206677, 0.9223436407077352, 0.9165262436244412, 0.9078045347696159, 0.8988294730684288, 0.8905472510904034, 0.8828533962180204, 0.8725625734372735, 0.8567666916054548, 0.837181922680511, 0.8108069735269728, 0.7864146419993184, 0.7580132075187418, 0.7253122659035981, 0.68707258834065, 0.646564815650457, 0.6079556370662436, 0.5702566120478356, 0.510898820682656, 0.4840710893644294, 0.45799342824717876, 0.44007968129237757, 0.4232977885161411, 0.41128600207470606, 0.40139430788569674, 0.39678151787611354, 0.39678151787611354, 0.39678151787611354, 0.39678151787611354, 0.39678151787611354, 0.39678151787611354, 0.39678151787611354, 0.39678151787611354, 0.39628459805518623, 0.3922015948980109, 0.38640491686741624, 0.37736385114818394, 0.36429060131634483, 0.35105686318705026, 0.33978748697108185, 0.32660223952375605, 0.31147598127787257, 0.29819412365484965, 0.28481197771810984, 0.27115451134004537, 0.253906811066316, 0.23860137013340793, 0.22637537433279548, 0.21539393895833006, 0.20516588073462, 0.1918544967742814, 0.17512332180945697, 0.15749029439766093, 0.14091862914311246, 0.12818258695561174, 0.11506800025153065, 0.10054104229219267, 0.08967815094400172, 0.07912378451247098, 0.06735620618892614, 0.056362336008402625, 0.047502663233445395, 0.0369997907341933, 0.02916211729079354, 0.023904522690813067, 0.0195324819996059, 0.011181978257513834, 0.008962593150743476, 0.006713394879380609, 0.006713394879380609, 0.006713394879380609]]
    check_input(a, b)
    # print(check_FID(a, b))
    # print(check_DTW(a, b))
    # print(check_input(a, b))
    # print(DTW(a, b))
    # print(findEvenLists([1,4,2,3,2,1], [[0,0,0,0,0,0,0,0],[0,1,5,7,10,12,13]], 5))
